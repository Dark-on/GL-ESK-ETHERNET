/*
 * upd_server.c
 *
 *  Created on: 17 Apr 2023
 *      Author: user1
 */

#include "main.h"
#include "lwip.h"
#include "sockets.h"
#include "cmsis_os.h"
#include <string.h>

#if defined(USE_UDP_SERVER) || !defined(USE_TCP_SERVER) || !defined(USE_HTTP_SERVER)
#define PORTNUM 5678UL
#else
#ifndef PORTNUM
#define PORTNUM 1500UL
#endif
#endif

#if (USE_UDP_SERVER_PRINTF == 1)
#include <stdio.h>
#define UDP_SERVER_PRINTF(...) do { printf("[udp_server.c: %s: %d]: ",__func__, __LINE__);printf(__VA_ARGS__); } while (0)
#else
#define UDP_SERVER_PRINTF(...)
#endif

static struct sockaddr_in serv_addr, client_addr;
static int socket_fd;
static uint16_t nport;

#include "cmsis_os.h"

static int udpServerInit(void)
{
	// socket()
	socket_fd = socket(AF_INET, SOCK_DGRAM, 0);
	if (socket_fd < 0) {
		UDP_SERVER_PRINTF("socket() error\n");
		return -1;
	}

	bzero(&serv_addr, sizeof(serv_addr));
	bzero(&client_addr, sizeof(client_addr));

	// filling server information
	nport = htons((uint16_t) PORTNUM);

	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;
	serv_addr.sin_port = nport;

	// bind()
	if( bind(socket_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
		UDP_SERVER_PRINTF("bind() error\n");
		close(socket_fd);
		return -1;
	}

	UDP_SERVER_PRINTF("Server is ready\n");
	return 0;
}

void StartUdpServerTask(void const * argument)
{
	osDelay(5000);// wait 5 sec to init lwip stack

	if(udpServerInit() < 0) {
		UDP_SERVER_PRINTF("udpSocketServerInit() error\n");
		return;
	}

	int addr_len = sizeof(client_addr);
	UDP_SERVER_PRINTF("Client: %s\n", inet_ntoa(client_addr.sin_addr));

	int nbytes;
	char buffer[80];

	// recvfrom() + sendto()
	while ( (nbytes = recvfrom(socket_fd, buffer, sizeof(buffer), 0, (struct sockaddr *)&client_addr, (socklen_t *)&addr_len)) > 0 )
	{
		if (strncmp(buffer, "exit", strlen("exit")) == 0)
		{
			sendto(socket_fd, "goodby!", strlen("goodby!"), 0, (struct sockaddr *)&client_addr, addr_len);
			break;
		}else if (sendto(socket_fd, buffer, nbytes, 0, (struct sockaddr *)&client_addr, (socklen_t *)&addr_len) < 0)
		{
			TCP_SERVER_PRINTF("send() error\n");
		}
	}
	close(socket_fd);
}
